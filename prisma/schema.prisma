// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Resume {
  id     String @id @default(cuid())
  userId String @map("user_id")

  title       String?
  description String?

  photoUrl    String?  @map("photo_url")
  colorHex    String   @default("#000000") @map("color_hex")
  borderStyle String   @default("squircle") @map("border_style")
  summary     String?
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  jobTitle    String?  @map("job_title")
  city        String?
  country     String?
  phone       String?
  email       String?
  skills      String[]

  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  workExperiences WorkExperience[]
  educations      Education[]
  projects         Project[]

  @@map("resumes")
}

model WorkExperience {
  id String @id @default(cuid())

  position    String?
  company     String?
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  description String?

  resumeId  String   @map("resume_id")
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("work_experiences")
}

model Education {
  id String @id @default(cuid())

  degree    String?
  school    String?
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  marks     String?

  resumeId String @map("resume_id")
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("educations")
}

model Project {
  id          String    @id @default(cuid())
  title       String?
  description String?
  link        String?
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  resumeId    String    @map("resume_id")
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("projects")
}

model UserSubscription {
  id        String   @id @default(cuid())
  userId    String   @unique() @map("user_id")
  plan      Plan     @default(FREE)
  orderId   String?  @unique() @map("order_id")
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_subscriptions")
}

enum Plan {
  FREE
  PREMIUM
}

model Order {
  id               String            @id @default(cuid())
  razorPayOrderId  String            @unique() @map("razorpay_order_id")
  userId           String            @map("user_id")
  amount           Int               @default(0)
  plan             Plan              @default(FREE)
  status           String            @default("pending")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  userSubscription UserSubscription?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
